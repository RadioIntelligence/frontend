import flet as ft
import json
import requests  # –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API

class CulturalApp:
    def __init__(self):
        self.page = None
        self.map_container = None
        self.recommendations = []
        self.api_base_url = "http://localhost:8000"  # URL —Ç–≤–æ–µ–≥–æ FastAPI
        self.access_token = None  # <-- –ù–û–í–û–ï

    def login(self, username: str, password: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–æ–≥–∏–Ω"""
        response = requests.post(
            f"{self.api_base_url}/auth/login",
            data={
                "username": username,
                "password": password
            }
        )
        if response.status_code == 200:
            data = response.json()
            self.access_token = data["access_token"]
            return True
        return False

    def fetch_recommendations(self):
        """–ó–∞–ø—Ä–æ—Å –∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É"""
        headers = {}
        if self.access_token:
            headers["Authorization"] = f"Bearer {self.access_token}"
        try:
            response = requests.get(f"{self.api_base_url}/recommendations", headers=headers)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f'Error fetching recommendations: {e}')
            return []

    def main(self, page: ft.Page):
        self.page = page
        page.title = "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –≥–∏–¥"
        page.theme_mode = ft.ThemeMode.LIGHT
        page.padding = 0
        page.fonts = {
            "Roboto": "https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
        }
        page.theme = ft.Theme(font_family="Roboto")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.load_recommendations()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_main_interface()

    def load_recommendations(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        self.recommendations = [
            {
                "id": 1,
                "title": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π",
                "type": "–ú—É–∑–µ–π",
                "era": "XIX –≤–µ–∫",
                "distance": "1.2 –∫–º",
                "rating": 4.8,
                "image": "üèõÔ∏è"
            },
            {
                "id": 2,
                "title": "–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã –∏ –æ—Ç–¥—ã—Ö–∞",
                "type": "–ü–∞—Ä–∫",
                "era": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å",
                "distance": "0.8 –∫–º",
                "rating": 4.6,
                "image": "üå≥"
            },
            {
                "id": 3,
                "title": "–°—Ç–∞—Ä–∏–Ω–Ω–∞—è —É—Å–∞–¥—å–±–∞",
                "type": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
                "era": "XVIII –≤–µ–∫",
                "distance": "2.1 –∫–º",
                "rating": 4.9,
                "image": "üè∞"
            },
            {
                "id": 4,
                "title": "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è",
                "type": "–ì–∞–ª–µ—Ä–µ—è",
                "era": "XX –≤–µ–∫",
                "distance": "1.5 –∫–º",
                "rating": 4.7,
                "image": "üñºÔ∏è"
            }
        ]

    def create_search_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
        return ft.Container(
            content=ft.Row([
                ft.Icon(ft.Icons.SEARCH, color=ft.Colors.GREY_600),
                ft.TextField(
                    hint_text="–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...",
                    border=ft.InputBorder.NONE,
                    expand=True,
                    text_size=14,
                    on_change=self.on_search_change
                ),
                ft.IconButton(
                    icon=ft.Icons.FILTER_LIST,
                    icon_color=ft.Colors.GREY_600,
                    on_click=self.open_filters
                )
            ]),
            bgcolor=ft.Colors.WHITE,
            border_radius=25,
            padding=ft.padding.symmetric(horizontal=16),
            margin=ft.margin.symmetric(vertical=8),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=8,
                color=ft.Colors.BLACK12,
                offset=ft.Offset(0, 2)
            )
        )

    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        return ft.Container(
            content=ft.Column([
                ft.Row([
                    ft.Text(
                        "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –≥–∏–¥",
                        size=24,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.IconButton(
                        icon=ft.Icons.ACCOUNT_CIRCLE,
                        icon_color=ft.Colors.WHITE,
                        on_click=self.open_profile
                    )
                ]),
                self.create_search_bar()
            ]),
            bgcolor=ft.Colors.PRIMARY,
            padding=16,
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=10,
                color=ft.Colors.BLACK26,
                offset=ft.Offset(0, 2)
            )
        )

    def create_navigation(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        nav_items = [
            {"icon": ft.Icons.MAP, "label": "–ö–∞—Ä—Ç–∞", "active": True},
            {"icon": ft.Icons.EXPLORE, "label": "–ö–∞—Ç–∞–ª–æ–≥"},
            {"icon": ft.Icons.EVENT, "label": "–ê—Ñ–∏—à–∞"},
            {"icon": ft.Icons.FAVORITE, "label": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"},
            {"icon": ft.Icons.ROUTE, "label": "–ú–∞—Ä—à—Ä—É—Ç—ã"}
        ]

        return ft.Container(
            content=ft.Row([
                ft.Container(
                    content=ft.Column([
                        ft.IconButton(
                            icon=item["icon"],
                            icon_color=ft.Colors.WHITE if item.get("active") else ft.Colors.GREY_600,
                            on_click=lambda e, i=index: self.on_nav_click(e, i)
                        ),
                        ft.Text(
                            item["label"],
                            size=10,
                            color=ft.Colors.WHITE if item.get("active") else ft.Colors.GREY_600
                        )
                    ], horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=2),
                    bgcolor=ft.Colors.PRIMARY if item.get("active") else ft.Colors.TRANSPARENT,
                    border_radius=12,
                    padding=8,
                    margin=2
                ) for index, item in enumerate(nav_items)
            ], alignment=ft.MainAxisAlignment.SPACE_EVENLY),
            bgcolor=ft.Colors.WHITE,
            padding=8,
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=8,
                color=ft.Colors.BLACK12,
                offset=ft.Offset(0, -2)
            )
        )

    def create_recommendation_card(self, item):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        return ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Row([
                        ft.Text(item["image"], size=24),
                        ft.VerticalDivider(),
                        ft.Column([
                            ft.Text(
                                item["title"],
                                weight=ft.FontWeight.BOLD,
                                size=14
                            ),
                            ft.Row([
                                ft.Container(
                                    content=ft.Text(
                                        item["type"],
                                        size=10,
                                        color=ft.Colors.BLUE_700
                                    ),
                                    bgcolor=ft.Colors.BLUE_50,
                                    border_radius=8,
                                    padding=ft.padding.symmetric(horizontal=8, vertical=2)
                                ),
                                ft.Text(
                                    f"‚≠ê {item['rating']}",
                                    size=10,
                                    color=ft.Colors.AMBER
                                )
                            ], spacing=8)
                        ], expand=True)
                    ]),
                    ft.Row([
                        ft.Text(
                            f"üìè {item['distance']}",
                            size=12,
                            color=ft.Colors.GREY_600
                        ),
                        ft.Text(
                            f"üïí {item['era']}",
                            size=12,
                            color=ft.Colors.GREY_600
                        )
                    ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN)
                ]),
                padding=12,
                on_click=lambda e: self.open_place_detail(item["id"])
            ),
            elevation=2,
            margin=ft.margin.symmetric(vertical=4),
        )

    def create_recommendations_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        return ft.Container(
            content=ft.Column([
                ft.Row([
                    ft.Text(
                        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å",
                        size=18,
                        weight=ft.FontWeight.BOLD
                    ),
                    ft.TextButton(
                        "–í—Å–µ ‚Üí",
                        on_click=self.open_catalog
                    )
                ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                ft.Column([
                    self.create_recommendation_card(item) for item in self.recommendations
                ], scroll=ft.ScrollMode.ADAPTIVE, height=400)
            ]),
            padding=16,
            bgcolor=ft.Colors.GREY_50,
            width=400
        )

    def create_map_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∫–∞—Ä—Ç—ã"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–∞—Ä—Ç—ã - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º API
        self.map_container = ft.Container(
            content=ft.Column([
                ft.Icon(ft.Icons.MAP, size=48, color=ft.Colors.GREY_400),
                ft.Text(
                    "–ö–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π",
                    size=16,
                    color=ft.Colors.GREY_600
                ),
                ft.FilledButton(
                    "–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
                    icon=ft.Icons.OPEN_IN_FULL,
                    on_click=self.open_full_map
                )
            ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
            bgcolor=ft.Colors.GREY_100,
            alignment=ft.alignment.center,
            expand=True,
            on_click=self.open_full_map
        )
        return self.map_container

    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_content = ft.Row([
            # –ö–∞—Ä—Ç–∞
            ft.Container(
                content=self.create_map_section(),
                expand=True
            ),
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.create_recommendations_section()
        ], expand=True)

        self.page.add(
            ft.Column([
                self.create_header(),
                main_content,
                self.create_navigation()
            ], expand=True)
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    def on_search_change(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        print(f"–ü–æ–∏—Å–∫: {e.control.value}")

    def open_filters(self, e):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

    def open_profile(self, e):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")

    def on_nav_click(self, e, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        print(f"–ù–∞–≤–∏–≥–∞—Ü–∏—è: {index}")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.update_navigation_state(index)

    def update_navigation_state(self, active_index):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
        print(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: {active_index}")

    def open_place_detail(self, place_id):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –º–µ—Å—Ç–∞"""
        print(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ—Å—Ç–∞: {place_id}")

    def open_catalog(self, e):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞")

    def open_full_map(self, e):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç—ã")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        map_api = self.initialize_map("map-container", {"center": [52.970756, 36.064358], "zoom": 12}) # –ú–ï–¢–ö–ê –¶–ï–ù–¢–†–ê –û–†–õ–ê
        # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
        
        map_api['add_marker'](52.962197, 36.064894, "–ü–∞–º—è—Ç–Ω–∏–∫ –ù. –°. –õ–µ—Å–∫–æ–≤—É")
        map_api['add_marker'](52.961665, 36.065917, "–ü–∞–º—è—Ç–Ω–∏–∫ –ê. –ü. –ï—Ä–º–æ–ª–æ–≤—É")
        map_api['add_marker'](52.967952, 36.064322, " –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∞—Ç—Ä –∏–º. –ò.–°. –¢—É—Ä–≥–µ–Ω–µ–≤–∞")
        map_api['add_marker'](52.956389, 36.055278, "–ì–æ—Å—Ç–∏–Ω—ã–π –î–≤–æ—Ä")
        map_api['add_marker'](52.96188, 36.06356, "–°–æ–±–æ—Ä –ú–∏—Ö–∞–∏–ª–∞ –ê—Ä—Ö–∞–Ω–≥–µ–ª–∞")
        
        # –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –ú–ê–†–ö–ï–† 
        
        map_api['set_center'](52.970756, 36.064358)


  # --- –î–æ–±–∞–≤–∏–º Python-–∞–Ω–∞–ª–æ–≥–∏ JS-—Ñ—É–Ω–∫—Ü–∏–π ---
    def initialize_map(self, container_id, options=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞)
        –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞—Ä—Ç–æ–π (WebView, Leaflet, –∏ —Ç.–¥.)
        """
        print(f'Initializing map in: {container_id}')
        return {
            'add_marker': self.add_marker,
            'set_center': self.set_center
        }

    def add_marker(self, lat, lng, title):
        print(f'Adding marker: {lat}, {lng}, {title}')
        # –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å UI –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ API

    def set_center(self, lat, lng):
        print(f'Setting center: {lat}, {lng}')

    async def fetch_recommendations(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            response = requests.get(f"{self.api_base_url}/recommendations")
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f'Error fetching recommendations: {e}')
            return []

    async def search_places(self, query, filters=None):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
        """
        try:
            payload = {"query": query, "filters": filters or {}}
            response = requests.post(f"{self.api_base_url}/search", json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f'Error searching places: {e}')
            return []


# JavaScript —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
js_functions = """
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
function initializeMap(containerId, options) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    console.log('Initializing map in:', containerId);
    return {
        addMarker: function(lat, lng, title) {
            console.log('Adding marker:', lat, lng, title);
        },
        setCenter: function(lat, lng) {
            console.log('Setting center:', lat, lng);
        }
    };
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async function fetchRecommendations() {
    try {
        const response = await fetch('/api/recommendations');
        return await response.json();
    } catch (error) {
        console.error('Error fetching recommendations:', error);
        return [];
    }
}

async function searchPlaces(query, filters) {
    try {
        const response = await fetch('/api/search', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ query, filters })
        });
        return await response.json();
    } catch (error) {
        console.error('Error searching places:', error);
        return [];
    }
}
"""

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = CulturalApp()

    ft.app(target=app.main)
