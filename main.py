# frontend_main.py
# –ò–º–ø–æ—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import flet as ft
import json
import requests  # –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API

# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
class CulturalApp:
    """
    –ö–ª–∞—Å—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –ª–æ–≥–∏–∫–æ–π –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º Flet-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤, —Ä–∞–±–æ—Ç—ã —Å API –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        self.page = None  # –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.map_container = None  # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã
        self.recommendations = []  # —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        self.api_base_url = "http://localhost:8000"  # URL –≤–∞—à–µ–≥–æ FastAPI-—Å–µ—Ä–≤–µ—Ä–∞
        self.access_token = None  # —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (None, –µ—Å–ª–∏ –Ω–µ –≤–æ—à—ë–ª)

    # === –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
    def main(self, page: ft.Page):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Flet-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        –ó–¥–µ—Å—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.
        """
        self.page = page
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        page.title = "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –≥–∏–¥"
        page.theme_mode = ft.ThemeMode.LIGHT
        page.padding = 0
        page.fonts = {
            "Roboto": "https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
        }
        page.theme = ft.Theme(font_family="Roboto")

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫—ç—à–∞), —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ —Ç–æ–∫–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ Python, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        # –µ–≥–æ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ñ–∞–π–ª, SQLite –∏ —Ç.–¥.
        if self.access_token:
            self.create_main_interface()
        else:
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ª–æ–≥–∏–Ω–∞
            self.show_login_screen()

    # === –≠–∫—Ä–∞–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===
    def show_login_screen(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –ª–æ–≥–∏–Ω–∞.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API.
        """
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        username_field = ft.TextField(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password_field = ft.TextField(label="–ü–∞—Ä–æ–ª—å", password=True)

        def on_login_click(e):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏".
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
            """
            username = username_field.value
            password = password_field.value
            if self.login(username, password):
                # –ï—Å–ª–∏ –ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω ‚Äî –æ—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.page.clean()
                self.create_main_interface()
            else:
                # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                self.page.add(ft.Text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", color=ft.Colors.RED))

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ª–æ–≥–∏–Ω–∞
        self.page.clean()
        self.page.add(
            ft.Column([
                ft.Text("–í—Ö–æ–¥", size=24, weight=ft.FontWeight.BOLD),
                username_field,
                password_field,
                ft.ElevatedButton("–í–æ–π—Ç–∏", on_click=on_login_click),
                # –ö–Ω–æ–ø–∫–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                ft.TextButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", on_click=self.show_register_screen)
            ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
        )

    def show_register_screen(self, e):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API.
        """
        username_field = ft.TextField(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password_field = ft.TextField(label="–ü–∞—Ä–æ–ª—å", password=True)

        def on_register_click(e):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è".
            """
            username = username_field.value
            password = password_field.value
            if self.register(username, password):
                # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.page.add(ft.Text("–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", color=ft.Colors.GREEN))
                # –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º—Å—è
                if self.login(username, password):
                    self.page.clean()
                    self.create_main_interface()
            else:
                # –ò–Ω–∞—á–µ ‚Äî –æ—à–∏–±–∫–∞
                self.page.add(ft.Text("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", color=ft.Colors.RED))

        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.page.clean()
        self.page.add(
            ft.Column([
                ft.Text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", size=24, weight=ft.FontWeight.BOLD),
                username_field,
                password_field,
                ft.ElevatedButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", on_click=on_register_click),
                # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É –ª–æ–≥–∏–Ω–∞
                ft.TextButton("–ù–∞–∑–∞–¥", on_click=lambda e: self.show_login_screen())
            ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
        )

    # === –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–≤—ã–∑–æ–≤ API) ===
    def login(self, username: str, password: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        –ï—Å–ª–∏ —É—Å–ø–µ—Ö ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω.
        """
        response = requests.post(
            f"{self.api_base_url}/auth/login",
            data={
                "username": username,
                "password": password
            }
        )
        if response.status_code == 200:
            data = response.json()
            self.access_token = data["access_token"]
            return True
        return False

    def register(self, username: str, password: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        response = requests.post(
            f"{self.api_base_url}/auth/register",
            json={
                "username": username,
                "password": password
            }
        )
        return response.status_code == 200

    # === –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏) ===
    def load_recommendations(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚Äî —Å API).
        """
        self.recommendations = [
            {
                "id": 1,
                "title": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π",
                "type": "–ú—É–∑–µ–π",
                "era": "XIX –≤–µ–∫",
                "distance": "1.2 –∫–º",
                "rating": 4.8,
                "image": "üèõÔ∏è"
            },
            {
                "id": 2,
                "title": "–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã –∏ –æ—Ç–¥—ã—Ö–∞",
                "type": "–ü–∞—Ä–∫",
                "era": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å",
                "distance": "0.8 –∫–º",
                "rating": 4.6,
                "image": "üå≥"
            },
            {
                "id": 3,
                "title": "–°—Ç–∞—Ä–∏–Ω–Ω–∞—è —É—Å–∞–¥—å–±–∞",
                "type": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
                "era": "XVIII –≤–µ–∫",
                "distance": "2.1 –∫–º",
                "rating": 4.9,
                "image": "üè∞"
            },
            {
                "id": 4,
                "title": "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è",
                "type": "–ì–∞–ª–µ—Ä–µ—è",
                "era": "XX –≤–µ–∫",
                "distance": "1.5 –∫–º",
                "rating": 4.7,
                "image": "üñºÔ∏è"
            }
        ]

    def create_search_bar(self):
        """
        –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.
        """
        return ft.Container(
            content=ft.Row([
                ft.Icon(ft.Icons.SEARCH, color=ft.Colors.GREY_600),
                ft.TextField(
                    hint_text="–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...",
                    border=ft.InputBorder.NONE,
                    expand=True,
                    text_size=14,
                    on_change=self.on_search_change
                ),
                ft.IconButton(
                    icon=ft.Icons.FILTER_LIST,
                    icon_color=ft.Colors.GREY_600,
                    on_click=self.open_filters
                )
            ]),
            bgcolor=ft.Colors.WHITE,
            border_radius=25,
            padding=ft.padding.symmetric(horizontal=16),
            margin=ft.margin.symmetric(vertical=8),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=8,
                color=ft.Colors.BLACK12,
                offset=ft.Offset(0, 2)
            )
        )

    def create_header(self):
        """
        –°–æ–∑–¥–∞—ë—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å –ª–æ–≥–æ—Ç–∏–ø–æ–º, —Å—Ç—Ä–æ–∫–æ–π –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–µ–º).
        """
        return ft.Container(
            content=ft.Column([
                ft.Row([
                    ft.Text(
                        "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –≥–∏–¥",
                        size=24,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.IconButton(
                        icon=ft.Icons.ACCOUNT_CIRCLE,
                        icon_color=ft.Colors.WHITE,
                        on_click=self.open_profile
                    )
                ]),
                self.create_search_bar()
            ]),
            bgcolor=ft.Colors.PRIMARY,
            padding=16,
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=10,
                color=ft.Colors.BLACK26,
                offset=ft.Offset(0, 2)
            )
        )

    def create_navigation(self):
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
        """
        nav_items = [
            {"icon": ft.Icons.MAP, "label": "–ö–∞—Ä—Ç–∞", "active": True},
            {"icon": ft.Icons.EXPLORE, "label": "–ö–∞—Ç–∞–ª–æ–≥"},
            {"icon": ft.Icons.EVENT, "label": "–ê—Ñ–∏—à–∞"},
            {"icon": ft.Icons.FAVORITE, "label": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"},
            {"icon": ft.Icons.ROUTE, "label": "–ú–∞—Ä—à—Ä—É—Ç—ã"}
        ]
        return ft.Container(
            content=ft.Row([
                ft.Container(
                    content=ft.Column([
                        ft.IconButton(
                            icon=item["icon"],
                            icon_color=ft.Colors.WHITE if item.get("active") else ft.Colors.GREY_600,
                            on_click=lambda e, i=index: self.on_nav_click(e, i)
                        ),
                        ft.Text(
                            item["label"],
                            size=10,
                            color=ft.Colors.WHITE if item.get("active") else ft.Colors.GREY_600
                        )
                    ], horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=2),
                    bgcolor=ft.Colors.PRIMARY if item.get("active") else ft.Colors.TRANSPARENT,
                    border_radius=12,
                    padding=8,
                    margin=2
                ) for index, item in enumerate(nav_items)
            ], alignment=ft.MainAxisAlignment.SPACE_EVENLY),
            bgcolor=ft.Colors.WHITE,
            padding=8,
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=8,
                color=ft.Colors.BLACK12,
                offset=ft.Offset(0, -2)
            )
        )

    def create_recommendation_card(self, item):
        """
        –°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç–æ—á–∫—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        """
        return ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Row([
                        ft.Text(item["image"], size=24),
                        ft.VerticalDivider(),
                        ft.Column([
                            ft.Text(
                                item["title"],
                                weight=ft.FontWeight.BOLD,
                                size=14
                            ),
                            ft.Row([
                                ft.Container(
                                    content=ft.Text(
                                        item["type"],
                                        size=10,
                                        color=ft.Colors.BLUE_700
                                    ),
                                    bgcolor=ft.Colors.BLUE_50,
                                    border_radius=8,
                                    padding=ft.padding.symmetric(horizontal=8, vertical=2)
                                ),
                                ft.Text(
                                    f"‚≠ê {item['rating']}",
                                    size=10,
                                    color=ft.Colors.AMBER
                                )
                            ], spacing=8)
                        ], expand=True)
                    ]),
                    ft.Row([
                        ft.Text(
                            f"üìè {item['distance']}",
                            size=12,
                            color=ft.Colors.GREY_600
                        ),
                        ft.Text(
                            f"üïí {item['era']}",
                            size=12,
                            color=ft.Colors.GREY_600
                        )
                    ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN)
                ]),
                padding=12,
                on_click=lambda e: self.open_place_detail(item["id"])
            ),
            elevation=2,
            margin=ft.margin.symmetric(vertical=4),
        )

    def create_recommendations_section(self):
        """
        –°–æ–∑–¥–∞—ë—Ç —Å–µ–∫—Ü–∏—é —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ (—Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫).
        """
        return ft.Container(
            content=ft.Column([
                ft.Row([
                    ft.Text(
                        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç—å",
                        size=18,
                        weight=ft.FontWeight.BOLD
                    ),
                    ft.TextButton(
                        "–í—Å–µ ‚Üí",
                        on_click=self.open_catalog
                    )
                ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                ft.Column([
                    self.create_recommendation_card(item) for item in self.recommendations
                ], scroll=ft.ScrollMode.ADAPTIVE, height=400)
            ]),
            padding=16,
            bgcolor=ft.Colors.GREY_50,
            width=400
        )

    def create_map_section(self):
        """
        –°–æ–∑–¥–∞—ë—Ç —Å–µ–∫—Ü–∏—é —Å –∫–∞—Ä—Ç–æ–π (–≤ –≤–∏–¥–µ –∑–∞–≥–ª—É—à–∫–∏).
        """
        self.map_container = ft.Container(
            content=ft.Column([
                ft.Icon(ft.Icons.MAP, size=48, color=ft.Colors.GREY_400),
                ft.Text(
                    "–ö–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π",
                    size=16,
                    color=ft.Colors.GREY_600
                ),
                ft.FilledButton(
                    "–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
                    icon=ft.Icons.OPEN_IN_FULL,
                    on_click=self.open_full_map
                )
            ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
            bgcolor=ft.Colors.GREY_100,
            alignment=ft.alignment.center,
            expand=True,
            on_click=self.open_full_map
        )
        return self.map_container

    def create_main_interface(self):
        """
        –°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–∞—Ä—Ç—É, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞–≤–∏–≥–∞—Ü–∏—é.
        """
        self.load_recommendations()
        main_content = ft.Row([
            ft.Container(
                content=self.create_map_section(),
                expand=True
            ),
            self.create_recommendations_section()
        ], expand=True)
        self.page.clean()  # –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.page.add(
            ft.Column([
                self.create_header(),
                main_content,
                self.create_navigation()
            ], expand=True)
        )

    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ===
    def on_search_change(self, e):
        print(f"–ü–æ–∏—Å–∫: {e.control.value}")

    def open_filters(self, e):
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

    def open_profile(self, e):
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")

    def on_nav_click(self, e, index):
        print(f"–ù–∞–≤–∏–≥–∞—Ü–∏—è: {index}")
        self.update_navigation_state(index)

    def update_navigation_state(self, active_index):
        print(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: {active_index}")

    def open_place_detail(self, place_id):
        print(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ—Å—Ç–∞: {place_id}")

    def open_catalog(self, e):
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞")

    def open_full_map(self, e):
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç—ã")
        # –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —á–µ—Ä–µ–∑ WebView –∏–ª–∏ Leaflet)
        map_api = self.initialize_map("map-container", {"center": [52.970756, 36.064358], "zoom": 12})
        # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        map_api['add_marker'](52.962197, 36.064894, "–ü–∞–º—è—Ç–Ω–∏–∫ –ù. –°. –õ–µ—Å–∫–æ–≤—É")
        map_api['add_marker'](52.961665, 36.065917, "–ü–∞–º—è—Ç–Ω–∏–∫ –ê. –ü. –ï—Ä–º–æ–ª–æ–≤—É")
        map_api['add_marker'](52.967952, 36.064322, "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∞—Ç—Ä –∏–º. –ò.–°. –¢—É—Ä–≥–µ–Ω–µ–≤–∞")
        map_api['add_marker'](52.956389, 36.055278, "–ì–æ—Å—Ç–∏–Ω—ã–π –î–≤–æ—Ä")
        map_api['add_marker'](52.96188, 36.06356, "–°–æ–±–æ—Ä –ú–∏—Ö–∞–∏–ª–∞ –ê—Ä—Ö–∞–Ω–≥–µ–ª–∞")
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
        map_api['set_center'](52.970756, 36.064358)

    # === Python-–∞–Ω–∞–ª–æ–≥–∏ JS-—Ñ—É–Ω–∫—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∏) ===
    def initialize_map(self, container_id, options=None):
        """
        –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã.
        –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Leaflet, Google Maps –∏ —Ç.–¥.
        """
        print(f'Initializing map in: {container_id}')
        return {
            'add_marker': self.add_marker,
            'set_center': self.set_center
        }

    def add_marker(self, lat, lng, title):
        print(f'Adding marker: {lat}, {lng}, {title}')

    def set_center(self, lat, lng):
        print(f'Setting center: {lat}, {lng}')

    # === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API ===
    async def fetch_recommendations(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
        """
        headers = {}
        if self.access_token:
            headers["Authorization"] = f"Bearer {self.access_token}"
        try:
            response = requests.get(f"{self.api_base_url}/recommendations", headers=headers)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f'Error fetching recommendations: {e}')
            return []

    async def search_places(self, query, filters=None):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç.
        """
        try:
            payload = {"query": query, "filters": filters or {}}
            response = requests.post(f"{self.api_base_url}/search", json=payload)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f'Error searching places: {e}')
            return []

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == "__main__":
    app = CulturalApp()
    ft.app(target=app.main)
